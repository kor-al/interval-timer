{"version":3,"sources":["Timer.js","App.js","reportWebVitals.js","index.js"],"names":["Timer","props","remaining","currentDuration","timerInterval","startTime","undefined","activeMode","countSessions","isPaused","audio","update","bind","clear","start","pause","resume","reset","stop","switchMode","switchPause","this","document","getElementById","btn","onclick","event","classList","contains","remove","add","setTimeout","clearInterval","timer","minutes","parseInt","seconds","properties","setTypeProperty","duration","Date","now","setInterval","play","data","pauseTime","setTimerInterval","currentTime","setPropery","value","id","className","isTimerPaused","onClick","icon","faRedo","size","src","process","React","Component","Controls","increment","decrement","type","count","faAngleUp","faAngleDown","Footer","style","fontWeight","href","App","state","defaultState","updateDuration","setProperty","resetState","session","default","break","setState","prevState","typeState","nextDuration","property","Object","keys","forEach","appClass","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"gUAwLeA,E,kDAlLX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,UAAY,EACjB,EAAKC,gBAAkB,EACvB,EAAKC,cAAgB,KACrB,EAAKC,eAAYC,EACjB,EAAKC,WAAa,UAClB,EAAKC,cAAgB,EACrB,EAAKC,UAAW,EAChB,EAAKC,MAAQ,KAEb,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,MAAQ,EAAKA,MAAMD,KAAX,gBACb,EAAKE,MAAQ,EAAKA,MAAMF,KAAX,gBACb,EAAKG,MAAQ,EAAKA,MAAMH,KAAX,gBACb,EAAKI,OAAS,EAAKA,OAAOJ,KAAZ,gBACd,EAAKK,MAAQ,EAAKA,MAAML,KAAX,gBACb,EAAKM,KAAO,EAAKA,KAAKN,KAAV,gBACZ,EAAKO,WAAa,EAAKA,WAAWP,KAAhB,gBAClB,EAAKQ,YAAc,EAAKA,YAAYR,KAAjB,gBApBJ,E,qDAwBnB,WACIS,KAAKX,MAAQY,SAASC,eAAe,QAErC,IAAIC,EAAMF,SAASC,eAAe,SAClCC,EAAIC,QAAU,SAAUC,GAChBF,EAAIG,UAAUC,SAAS,SACvBJ,EAAIG,UAAUE,OAAO,QAEzBL,EAAIG,UAAUG,IAAI,QAClBC,YAAW,WACHP,EAAIG,UAAUC,SAAS,SACvBJ,EAAIG,UAAUE,OAAO,UAE1B,Q,mBAKX,WACIG,cAAcX,KAAKjB,iB,oBAGvB,SAAO6B,GACH,IAAIC,EAAUC,SAASF,EAAQ,GAAI,IAC/BG,EAAUD,SAASF,EAAQ,GAAI,IAEnC,GAAIC,GAAW,GAAKE,GAAW,EAAG,CAC9B,IAAIC,EAAa,CACb,QAAWH,EACX,QAAWE,GAEff,KAAKpB,MAAMqC,gBAAgBD,EAAYhB,KAAKd,e,8BAKpD,SAAiBgC,GAAW,IAAD,OACvBlB,KAAKR,QACL,IAAIoB,EAAQM,EACZlB,KAAKhB,UAAYmC,KAAKC,MACtBpB,KAAKV,OAAOsB,GACZA,IACAZ,KAAKjB,cAAgBsC,aAAY,WAC7B,GAAIT,EAAQ,EAKR,OAJA,EAAKxB,UAAW,EAChB,EAAKI,QACL,EAAKM,kBACL,EAAKL,QAIS,IAAVmB,GACI,EAAKvB,OACL,EAAKA,MAAMiC,OAGnB,EAAKhC,OAAOsB,GACZA,MAEL,O,mBAGP,WACSZ,KAAKZ,UAKiB,IAAnBY,KAAKnB,WAAoBmB,KAAKlB,kBAAoBkB,KAAKpB,MAAM2C,KAAKvB,KAAKd,YAAYgC,WACnFlB,KAAKnB,UAAwD,GAA5CmB,KAAKpB,MAAM2C,KAAKvB,KAAKd,YAAYgC,SAAgBlB,KAAKpB,MAAM2C,KAAKvB,KAAKd,YAAY6B,QACnGf,KAAKlB,gBAAkBkB,KAAKpB,MAAM2C,KAAKvB,KAAKd,YAAYgC,UAE5DlB,KAAKL,OAAOK,KAAKnB,YARjBmB,KAAKN,U,mBAab,WACIM,KAAKR,QACLQ,KAAKD,aAAY,GAEjB,IAAIyB,EAAYL,KAAKC,MACrBpB,KAAKnB,YAAc2C,EAAYxB,KAAKhB,WAAa,M,kBAGrD,WACIgB,KAAKD,aAAY,GACjBC,KAAKR,U,oBAGT,SAAOX,GACHmB,KAAKD,aAAY,GACjBC,KAAKyB,iBAAiB5C,K,mBAG1B,WACImB,KAAKR,QACLQ,KAAKD,aAAY,GACjBC,KAAKd,WAAa,UAClBc,KAAKnB,UAAY,EACjBmB,KAAKX,MAAMK,QACXM,KAAKX,MAAMqC,YAAc,EACzB1B,KAAKb,cAAgB,EACrBa,KAAKpB,MAAMgB,U,wBAGf,WACII,KAAKd,WAAkC,YAApBc,KAAKd,WAA2B,QAAU,UAC7Dc,KAAKpB,MAAM+C,WAAW,aAAc3B,KAAKd,YACzCc,KAAKnB,UAAY,EACK,YAAnBmB,KAAKd,aACJc,KAAKb,eAAe,K,yBAI5B,SAAYyC,GACR5B,KAAKZ,SAAWwC,EAChB5B,KAAKpB,MAAM+C,WAAW,gBAAiB3B,KAAKZ,Y,oBAIhD,WAEI,IAAIyB,EAAUb,KAAKpB,MAAM2C,KAAKvB,KAAKd,YAAY2B,QAC3CE,EAAUf,KAAKpB,MAAM2C,KAAKvB,KAAKd,YAAY6B,QAI/C,OAHAF,EAAO,UAAMA,EAAU,GAAK,IAAMA,EAAUA,GAC5CE,EAAO,UAAMA,EAAU,GAAK,IAAMA,EAAUA,GAGxC,sBAAKc,GAAG,QAAQC,UAAU,QAA1B,UACI,sBAAKA,UAAU,gBAAf,UACI,sBAAKD,GAAG,cAAcC,UAAU,eAAhC,UACK9B,KAAKpB,MAAM2C,KAAKrC,WACjB,sBAAM4C,UAAU,eAAhB,mBAAmC9B,KAAKpB,MAAM2C,KAAKQ,cAAiB,GAAI,KAAO/B,KAAKb,oBAExF,sBAAK0C,GAAG,iBAAiBC,UAAU,kBAAnC,UACI,wBAAQD,GAAG,aAAaC,UAAS,yBAAoB9B,KAAKpB,MAAM2C,KAAKQ,cAAgB,QAAU,QAAUC,QAAShC,KAAKP,QACvH,wBAAQoC,GAAG,QAAQC,UAAU,YAAYE,QAAShC,KAAKJ,MAAvD,SAA8D,cAAC,IAAD,CAAiBqC,KAAMC,IAAQC,KAAK,eAI1G,qBAAKL,UAAU,iBAAf,SACI,qBAAKD,GAAG,YAAR,mBAAwBhB,EAAxB,YAAmCE,OAGvC,uBAAOc,GAAG,OAAOO,IAAKC,+C,GA3KlBC,IAAMC,W,iBCMpBC,E,kDAEJ,WAAY5D,GAAQ,IAAD,8BACjB,cAAMA,IACD6D,UAAY,EAAKA,UAAUlD,KAAf,gBACjB,EAAKmD,UAAY,EAAKA,UAAUnD,KAAf,gBAHA,E,6CAMnB,WACES,KAAKpB,MAAMU,OAAO,EAAIU,KAAKpB,MAAM+D,Q,uBAGnC,WAEE3C,KAAKpB,MAAMU,QAAQ,EAAGU,KAAKpB,MAAM+D,Q,oBAInC,WACE,OACE,sBAAKb,UAAU,WAAWD,GAAE,UAAK7B,KAAKpB,MAAM+D,KAAhB,aAA5B,UACE,qBAAKd,GAAE,UAAK7B,KAAKpB,MAAM+D,KAAhB,UAA8Bb,UAAU,kBAA/C,SAAkE9B,KAAKpB,MAAM+D,OAC7E,sBAAKb,UAAU,kBAAf,UACE,sBAAMD,GAAE,UAAK7B,KAAKpB,MAAM+D,KAAhB,WAA+Bb,UAAU,mBAAjD,SAAqE9B,KAAKpB,MAAMgE,QAChF,uBAAMd,UAAU,oBAAhB,UACE,wBAAQD,GAAE,UAAK7B,KAAKpB,MAAM+D,KAAhB,cAAkCb,UAAU,sBAAsBE,QAAShC,KAAKyC,UAA1F,SAAqG,cAAC,IAAD,CAAiBR,KAAMY,IAAWV,KAAK,SAC5I,wBAAQN,GAAE,UAAK7B,KAAKpB,MAAM+D,KAAhB,cAAkCb,UAAU,sBAAsBE,QAAShC,KAAK0C,UAA1F,SAAqG,cAAC,IAAD,CAAiBT,KAAMa,IAAaX,KAAK,sB,GA1BnIG,IAAMC,WAmC7B,SAASQ,EAAOnE,GACd,OACE,yBAAQkD,UAAS,SAAjB,mCACwB,mBAAGkB,MAAO,CAACC,WAAY,KAAMC,KAAK,4BAAlC,uB,IAgHbC,E,kDAzGb,WAAYvE,GAAQ,IAAD,8BACjB,cAAMA,IACDwE,MAAQ,EAAKC,eAElB,EAAKC,eAAiB,EAAKA,eAAe/D,KAApB,gBACtB,EAAK0B,gBAAkB,EAAKA,gBAAgB1B,KAArB,gBACvB,EAAKgE,YAAc,EAAKA,YAAYhE,KAAjB,gBACnB,EAAKiE,WAAa,EAAKA,WAAWjE,KAAhB,gBAPD,E,gDAUnB,WACE,MAAO,CACLkE,QAAS,CAAEvC,SAAU,GAAIL,QAAS,GAAIE,QAAS,EAAG2C,QAAS,IAC3DC,MAAO,CAAEzC,SAAU,EAAGL,QAAS,EAAGE,QAAS,EAAG2C,QAAS,GACvD3B,eAAe,EACf7C,WAAY,a,+BAIhB,c,wBAsBA,WACEc,KAAK4D,SAAS5D,KAAKqD,kB,4BAGrB,SAAezB,GAA0B,IAAnBe,EAAkB,uDAAX,UAC3B3C,KAAK4D,UAAS,SAACC,GACb,IAAIC,EAAS,eAAQD,EAAUlB,IAC3BoB,EAAeD,EAAU5C,SAAWU,EACxC,GAAImC,EAAe,GAAKA,GAAgB,IAAMF,EAAU9B,cAItD,OAHA+B,EAAU5C,SAAW6C,EACrBD,EAAUjD,QAAUkD,EACpBD,EAAU/C,QAAU,EACb,eAAG4B,EAAOmB,Q,yBAKvB,SAAYE,EAAUpC,GACpB5B,KAAK4D,SAAL,eAAiBI,EAAWpC,M,6BAI9B,SAAgBZ,EAAY2B,GAE1B,IAAImB,EAAS,eAAQ9D,KAAKoD,MAAMT,IAChCsB,OAAOC,KAAKlD,GAAYmD,SAAQ,SAACH,GAC/BF,EAAUE,GAAYhD,EAAWgD,MAEnChE,KAAK4D,SAAL,eAAiBjB,EAAOmB,M,oBAI1B,WAEE,IAAIM,EAAW,GAcf,OAbGpE,KAAKoD,MAAMrB,cACZqC,EAAW,UAGkB,YAA1BpE,KAAKoD,MAAMlE,aACZkF,EAAW,cAEgB,UAA1BpE,KAAKoD,MAAMlE,aACZkF,EAAW,aAMb,sBAAKtC,UAAS,cAASsC,GAAvB,UACE,sBAAKtC,UAAU,iBAAf,UACA,cAAC,EAAD,CAAOP,KAAMvB,KAAKoD,MAAOnC,gBAAiBjB,KAAKiB,gBAAiBU,WAAY3B,KAAKuD,YAAa3D,MAAOI,KAAKwD,aAC1G,sBAAK1B,UAAS,wBAAmB9B,KAAKoD,MAAMrB,cAAgB,SAAW,IAAvE,UACE,cAAC,EAAD,CAAUY,KAAK,UAAUrD,OAAQU,KAAKsD,eAAgBV,MAAO5C,KAAKoD,MAAL,QAAsBlC,WACnF,cAAC,EAAD,CAAUyB,KAAK,QAAQrD,OAAQU,KAAKsD,eAAgBV,MAAO5C,KAAKoD,MAAL,MAAoBlC,cAEjF,cAAC6B,EAAD,CAAQhB,cAAiB/B,KAAKoD,MAAMrB,mBAEtC,cAAC,IAAD,W,GArGYO,IAAMC,WCzCT8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/E,SAASC,eAAe,SAM1BmE,M","file":"static/js/main.2da54393.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faRedo } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass Timer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.remaining = 0;\r\n        this.currentDuration = 0; //to track changes in duration on pauses\r\n        this.timerInterval = null\r\n        this.startTime = undefined;\r\n        this.activeMode = 'session';\r\n        this.countSessions = 1;\r\n        this.isPaused = true;\r\n        this.audio = null;\r\n\r\n        this.update = this.update.bind(this);\r\n        this.clear = this.clear.bind(this);\r\n        this.start = this.start.bind(this);\r\n        this.pause = this.pause.bind(this);\r\n        this.resume = this.resume.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n        this.stop = this.stop.bind(this);\r\n        this.switchMode = this.switchMode.bind(this);\r\n        this.switchPause = this.switchPause.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.audio = document.getElementById('beep');\r\n\r\n        var btn = document.getElementById('reset');\r\n        btn.onclick = function (event) {\r\n            if (btn.classList.contains('spin')) {\r\n                btn.classList.remove('spin');\r\n            }\r\n            btn.classList.add('spin');\r\n            setTimeout(function () {\r\n                if (btn.classList.contains('spin')) {\r\n                    btn.classList.remove('spin');\r\n                }\r\n            }, 500);\r\n        }\r\n\r\n    }\r\n\r\n    clear() {\r\n        clearInterval(this.timerInterval)\r\n    }\r\n\r\n    update(timer) {\r\n        let minutes = parseInt(timer / 60, 10);\r\n        let seconds = parseInt(timer % 60, 10);\r\n\r\n        if (minutes >= 0 && seconds >= 0) {\r\n            let properties = {\r\n                'minutes': minutes,\r\n                'seconds': seconds\r\n            }\r\n            this.props.setTypeProperty(properties, this.activeMode);\r\n        }\r\n\r\n    }\r\n\r\n    setTimerInterval(duration) {\r\n        this.clear();\r\n        var timer = duration;\r\n        this.startTime = Date.now();\r\n        this.update(timer);\r\n        timer--;\r\n        this.timerInterval = setInterval(() => {\r\n            if (timer < 0) {\r\n                this.isPaused = true;\r\n                this.clear();\r\n                this.switchMode();\r\n                this.start();\r\n                return;\r\n            }\r\n            else {\r\n                if (timer === 0) {\r\n                    if (this.audio) {\r\n                        this.audio.play();\r\n                    }\r\n                }\r\n                this.update(timer);\r\n                timer--;\r\n            }\r\n        }, 1000)\r\n    }\r\n\r\n    start() {\r\n        if (!this.isPaused) {\r\n            this.pause();\r\n        }\r\n        else {\r\n            //if first start\r\n            if (this.remaining === 0 || (this.currentDuration !== this.props.data[this.activeMode].duration)) {\r\n                this.remaining = this.props.data[this.activeMode].duration * 60 + this.props.data[this.activeMode].seconds;//in seconds;\r\n                this.currentDuration = this.props.data[this.activeMode].duration;\r\n            }\r\n            this.resume(this.remaining);\r\n        }\r\n    }\r\n\r\n\r\n    pause() {\r\n        this.clear();\r\n        this.switchPause(true);\r\n\r\n        let pauseTime = Date.now(); //mseconds\r\n        this.remaining -= (pauseTime - this.startTime) / 1000;\r\n    }\r\n\r\n    stop() {\r\n        this.switchPause(true);\r\n        this.clear();\r\n    }\r\n\r\n    resume(remaining) {\r\n        this.switchPause(false);\r\n        this.setTimerInterval(remaining);\r\n    }\r\n\r\n    reset() {\r\n        this.clear();\r\n        this.switchPause(true);\r\n        this.activeMode = 'session';\r\n        this.remaining = 0;\r\n        this.audio.pause();\r\n        this.audio.currentTime = 0;\r\n        this.countSessions = 1;\r\n        this.props.reset();\r\n    }\r\n\r\n    switchMode() {\r\n        this.activeMode = (this.activeMode === 'session' ? 'break' : 'session');\r\n        this.props.setPropery('activeMode', this.activeMode);\r\n        this.remaining = 0;\r\n        if(this.activeMode ==='session'){\r\n            this.countSessions+=1;\r\n        }\r\n    }\r\n\r\n    switchPause(value) {\r\n        this.isPaused = value;\r\n        this.props.setPropery('isTimerPaused', this.isPaused);\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let minutes = this.props.data[this.activeMode].minutes;\r\n        let seconds = this.props.data[this.activeMode].seconds;\r\n        minutes = `${minutes < 10 ? \"0\" + minutes : minutes}`;\r\n        seconds = `${seconds < 10 ? \"0\" + seconds : seconds}`;\r\n\r\n        return (\r\n            <div id='timer' className=\"timer\">\r\n                <div className=\"timer__header\">\r\n                    <div id=\"timer-label\" className=\"timer__label\">\r\n                        {this.props.data.activeMode}\r\n                        <span className='sessionCount'>{`${this.props.data.isTimerPaused ?  \"\": ' #' + this.countSessions}`}</span>\r\n                    </div>\r\n                    <div id=\"timer-controls\" className=\"timer__controls\">\r\n                        <button id=\"start_stop\" className={`btn pause-play ${this.props.data.isTimerPaused ? \"pause\" : \"play\"}`} onClick={this.start}></button>\r\n                        <button id=\"reset\" className=\"btn reset\" onClick={this.reset}><FontAwesomeIcon icon={faRedo} size='1x' /></button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"timer__display\">\r\n                    <div id=\"time-left\">{`${minutes}:${seconds}`}</div>\r\n                </div>\r\n\r\n                <audio id=\"beep\" src={process.env.PUBLIC_URL + '/sounds/07022112.wav'}></audio>\r\n                {/* <audio id=\"beep\" src=\"https://sound-effects-media.bbcrewind.co.uk/mp3/07022112.mp3\"></audio> */}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default Timer;","import './App.css';\nimport './Timer.css';\nimport './Timer.js';\nimport React from 'react';\nimport ReactFCCtest from 'react-fcctest';\nimport Timer from './Timer.js';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faAngleUp, faAngleDown } from '@fortawesome/free-solid-svg-icons';\n\n\nclass Controls extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.increment = this.increment.bind(this);\n    this.decrement = this.decrement.bind(this);\n  }\n\n  increment() {\n    this.props.update(+1, this.props.type);\n  }\n\n  decrement() {\n    //only allow positive values\n    this.props.update(-1, this.props.type);\n  }\n\n\n  render() {\n    return (\n      <div className='controls' id={`${this.props.type}-controls`}>\n        <div id={`${this.props.type}-label`} className='controls__label'>{this.props.type}</div>\n        <div className=\"controls__panel\">\n          <span id={`${this.props.type}-length`} className='controls__length'>{this.props.count}</span>\n          <span className='controls__buttons' >\n            <button id={`${this.props.type}-increment`} className='controls__increment' onClick={this.increment}><FontAwesomeIcon icon={faAngleUp} size='2x' /></button>\n            <button id={`${this.props.type}-decrement`} className=\"controls__decrement\" onClick={this.decrement}><FontAwesomeIcon icon={faAngleDown} size='2x' /></button>\n          </span>\n        </div>\n      </div>\n    )\n  }\n\n}\n\nfunction Footer(props) {\n  return (\n    <footer className={`footer`}>\n      Designed and Build by <a style={{fontWeight: 700}} href=\"https://github.com/kor-al\">kor-al</a>\n    </footer>\n  );\n}\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = this.defaultState();\n\n    this.updateDuration = this.updateDuration.bind(this);\n    this.setTypeProperty = this.setTypeProperty.bind(this);\n    this.setProperty = this.setProperty.bind(this);\n    this.resetState = this.resetState.bind(this);\n  }\n\n  defaultState() {\n    return {\n      session: { duration: 25, minutes: 25, seconds: 0, default: 25 },\n      break: { duration: 5, minutes: 5, seconds: 0, default: 5 },\n      isTimerPaused: true,\n      activeMode: 'session'\n    }\n  }\n\n  componentDidMount() {\n    // add some hovered functionality\n    // var app = document.querySelector('.App');\n    // var controls = document.querySelector('.App__controls');\n    // var timer = document.getElementById('timer');\n\n    // timer.addEventListener('mouseover', (e) => {\n\n    //     if (!controls.classList.contains('active')) {\n    //       controls.classList.add('active');\n    //       setTimeout(()=>{\n    //         if(!this.state.isTimerPaused){\n    //           controls.classList.remove('active');\n    //         }\n    //     }, 3000);\n    //     } \n  \n  \n    //   });\n\n  }\n\n  resetState() {\n    this.setState(this.defaultState());\n  }\n\n  updateDuration(value, type = 'session') {\n    this.setState((prevState) => {\n      var typeState = { ...prevState[type] };\n      var nextDuration = typeState.duration + value;\n      if (nextDuration > 0 && nextDuration <= 60 && prevState.isTimerPaused) {\n        typeState.duration = nextDuration;\n        typeState.minutes = nextDuration;\n        typeState.seconds = 0;\n        return { [type]: typeState };\n      }\n    })\n  }\n\n  setProperty(property, value) {\n    this.setState({ [property]: value })\n  }\n\n\n  setTypeProperty(properties, type) {\n    //properties = {property1: value1, property2: value2, ...}\n    var typeState = { ...this.state[type] }\n    Object.keys(properties).forEach((property) => {\n      typeState[property] = properties[property];\n    })\n    this.setState({ [type]: typeState })\n  }\n\n\n  render() {\n    \n    let appClass = '';\n    if(this.state.isTimerPaused){\n      appClass = 'paused';\n    }\n    else{\n      if(this.state.activeMode === 'session'){\n        appClass = 'in-session';\n      }\n      if(this.state.activeMode === 'break'){\n        appClass = 'in-break';\n      }\n    } \n\n\n    return (\n      <div className={`App ${appClass}`}>\n        <div className=\"App__container\">\n        <Timer data={this.state} setTypeProperty={this.setTypeProperty} setPropery={this.setProperty} reset={this.resetState} />\n        <div className={`App__controls ${this.state.isTimerPaused ? \"active\" : \"\"}`}>\n          <Controls type='session' update={this.updateDuration} count={this.state['session'].duration} />\n          <Controls type='break' update={this.updateDuration} count={this.state['break'].duration} />\n        </div>\n        <Footer isTimerPaused = {this.state.isTimerPaused}/>\n      </div>\n      <ReactFCCtest />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}